### 1
'''

with open('rosalind_dna.txt','r') as open_file:
	line = open_file.readline()
print(line)
A = C = G = T = 0

for i in line:
	if i=='A': A+=1
	elif i=='C': C+=1
	elif i=='G': G+=1
	elif i=='T': T+=1
print(A,C,G,T)

### 1b

with open('rosalind_dna.txt','r') as open_file:
	line = open_file.readline()

print(line.count('A'), line.count('C'), line.count('G'), line.count('T'))



### 1c
with open('rosalind_dna.txt','r') as open_file:
	line = open_file.readline()
	line = line.strip()
mydict = {'A':0, 'C':0, 'G':0, 'T':0}
for i in line:
	mydict[i]+=1
print(mydict['A'],mydict['C'],mydict['G'],mydict['T'])


### 2
with open('rosalind_rna.txt','r') as openfile:
	line = openfile.readline().strip()

output = ''

for i in line:
	if i=='T':
		output+='U'
	else:
		output+=i

print(line)
print('\n')
print(output)


### 2b
with open('rosalind_rna.txt','r') as openfile:
	line = openfile.readline().strip()

print(line.replace('T','U'))


### 3
with open('rosalind_revc.txt','r') as openfile:
	line = openfile.readline().strip()

result = ''
linereversed = line[::-1]
for i in linereversed:
	if i=='A': result+='T'
	elif i=='T': result+='A'
	elif i=='C': result+='G'
	elif i=='G': result+='C'
print('input: ',line)
print('***')
print('reversed: ',linereversed)
print('***')
print('result: ',result)


### 3b
with open('rosalind_revc.txt','r') as openfile:
	line = openfile.readline().strip()

result = line.replace('A','t').replace('T','a').replace('G','c').replace('C','g').upper()[::-1]
print(line)
print('***')
print(result)



### 4
def cdpercent(mystring):
	strlen = len(mystring)
	cg = mystring.count('C')+mystring.count('G')
	percent = round(cg*100/strlen,6)
	return percent

totalstr = ''
with open('rosalind_gc.txt','r') as openfile:
	line = openfile.readline()
	while line:
		totalstr+=line.strip()
		line = openfile.readline()

inputlist = []
inputlist = totalstr.split('>')

inputdic = {}
for i in range(1,len(inputlist)):
	inputdic[inputlist[i][0:13]]=inputlist[i][13:]

resultdic = {}
for key,value in inputdic.items():
	resultdic[key]=cdpercent(inputdic[key])

v=list(resultdic.values())
k=list(resultdic.keys())

print(k[v.index(max(v))])
print(max(v))

### 5 http://rosalind.info/problems/fib/
n = 0
k = 0
inputlist = []
with open('rosalind_fib.txt','r') as open_file:
	line = open_file.readline().strip()
	inputlist = line.split(' ')
	n = int(inputlist[0])
	k = int(inputlist[1])
print(inputlist)
print('n=',n)
print('k=',k)

series = [[0,1,0],[1,0,0]] # mature/young/total, 1st and 2nd months
mature = 0
young = 0
total = 0

for x in range(2,n):
	print('\nMonth',x+1)
	mature = series[x-1][0] + series[x-2][0]*k
	print('mature=',mature)
	young = series[x-1][0]*k
	print('young=',young)
	total = mature + young
	print('total=',total)
	series.append([mature,young,total])
print(series)
print(series[-1][-1])


### 6
with open('rosalind_hamm.txt','r') as openfile:
	s = openfile.readline()
	t = openfile.readline()
#s = 'TGGCATTGCTGGGAATGAGCCAGGGACCCAGCCAATGCAACCGGTCACATTCCTTAGTGTCTCAAGCATCGTCCGCTTTTTCTCTTTATGGGGAACTGTCTGGTGGACTAGCATTCTGACTTATTTAACCACAGAATGAACCACCGTCATCCTTTACGACGCTACAGTGCGGCCATTCTGTCGACTGTCGTTAGCCGGCGGCGGGGGGGCTCGCACACTCTCATCTTACTCGGTTGTTCGCGTTAGGACTAACGCAGCAATCATGCTATCCCTGTACGAAAATGATACCGTACAGTGAGATGTATGGGTTGTCCCTACATACACAACGCGAGCCCCCAGTACAAACATCCCAAATTTTCCCCGTAGCTGTGTTGGGTCAGCGTCGCCCCCCCATCGCAAGATCAGTTGGCAGTACGGGAGTAGATTGTGCGGAGGCCGTACCATAAGGGCCATCCGAAATGGACTGATCCACGTGGTATATTACCCTACGAGAATCGTGGTACGCAATACGGATGGGTACAATATGTACTGATGGGTCACCGTATCATCTTATATTGGTTCGCCAAATAGCCGCCTCGCGTGCACGTTTAGGTGGTTACTATACGACCAAGAGGGCTCCAAATTTGTATTTCCCCGGCTAGTACTAGCTAACCCGTCTGGCCATCAGCATTCTGCTACCACACATCATTTGCATAAGGTATCATGGGGCGCAGTTCATTCAGAACATGGCCACCCTCGCAGATAATGTATCCTTTAGTCCGTCTAACATAAGCTGACGGCAATAGCTAGCCAGGGACCCGCTGTCTTTTCCCATACTCAGTCGGGGGGCCGAGTAGGCTTCCAACTGAGCTGTTTTCTGGGGATAAAGTCAAATCGATACAGTTGTTCGGCTCCCCAACCAAAAACGTTGTAGTCCTCATATTTGCACCGGGCCGAAT'
#t = 'TTGCCTTACGTGCAACGGCCAACTTAACAAGCCCATGCTCACGTTACCTTAACTTAGCAGCTCAAGTATCGGCCCTTTCACCTACAGACGGTGTACTTCCTGGTTAATTAGCGCTCAACGTTATCTGGACAAAACGTTTCCCGCATTCATACAGGACTCCTAAAAAGATCTCGCAAACGCTTTGTTATTGAGCATAGAAGGCGGGTGTTATCCAATACAATGATTTTGCTTCGGAACCGAATATCCAACAACCGGTACTACCTAGGTATCGCAGATGGATCATCGCACTAGATGCGTAGATGACCGGCTAGGCCTTACATGCAGATCTCGATGCCTTTGGAGAAAGATCTGCAGTGTCCCAGTCGGGAGCCAGGGAACAGCGTCTTACGCAGTATAGAAATATAGAGTTCCGTACTACTTGGGAATATCGGTCGGTAGTATTATAATGCCCTACCACGAAGGACAAAACATTTCCTAGTCGGACCCTCGCTTAATCATTGCCGACTAGAACCATAGGTCGTATATGTATTCTAGTTTCTGGGTTGCCACCGTTATTCGTTGTCCCGATTATCATGTTCCTAGCTTGTGCAAGACCGGACTAACCATATGAGATTACGCATCATCCGTGGCTCCCTGGCTCACAGTAACTAGCCTGTAGGCGGCCCCGTATTTTACTGCGACACGCAGTTTCTAAAAGCGATTGTGGGACTCTCTTCATATTCACCACGGCCACCCGATGAGCGACTGGACGATAGAAGCTTTCTATCACCGGCTGACTTTATTAGCTAATCTGTGAGCCGCCCCTTATAAACCCTGCTGGGTCGGCTCGGAATGTTATAGCTCCCCTTGGTCCTTTCTCGGGCAAGAGTTAACGCCCCTCACTTGTTGTGCTCACTAACCTCAAGCTATTCGGAATCATTATCAGCACCGAAACTGGA'
hammdist = 0
print(s)
print(t)

for i in range(len(s)):
	if s[i]!=t[i]:
		hammdist+=1

print(hammdist)


### 7
# k - AA
# m - Aa
# n - aa
# AA or Aa
with open('rosalind_iprb.txt','r') as openfile:
	line = openfile.readline().strip()
	mylist = line.split()
print(line)
print(mylist)
k = int(mylist[0])
m = int(mylist[1])
n = int(mylist[2])

print(k, m, n)

sum = k+m+n
#m*m*0.75+m*n*0.5
#aa = 0

mm0_25 = m/sum * (m-1)/(sum-1) * 1/4

mn1_2 = m/sum * n/(sum-1) * 1#/2

nn1 = n/sum * (n-1)/(sum-1) * 1

print('mm0_25=',mm0_25)
print('mn1_2=',mn1_2)
print('nn1=',nn1)
aa = mm0_25 + mn1_2 + nn1
print('aa=',aa)
Ax = 1-aa
print('Ax=',Ax)



### 8
rna_list = []
rna_dict = {}
with open('rosalind_iprb.txt','r') as openfile:
	line = openfile.readline().strip()
	while line:
		rna_list = line.split()
		for i in range(7):
			rna_dict[rna_list[i]]=rna_list[i+1]
		line = openfile.readline().strip()
#print(rna_dict)

with open('rna.txt','r') as openfile:
	input_rna = openfile.readline().strip()
input_rna = 'AUGCGUCCUAGGUCUGCGCAUAAAUUCAGCAUCACCCUCUCAACGAGGCCUCUAUGCGCAAACCUUAUCGCUCGACCCAUAACCGUUCCGGUGGGUUGGUCUAAGAGGACGGGUUGUGUUGUAAGAAAGGGCUAUACUGGUCGGGUAGGAGCAACAGGUGUUAUUAUGGACCAAGAAGGAGGUAGGGCAAUCGCACCUAAUAAGUCCCUCCAGUUGCGAAUCGGACCCUUCGUCAAGAGAUUUCCUGUCGCACAGCGACGGGGCGCUAUAACCGGACAGCUCUGCAUCCUGCCUUCCUACCUAAUUGGGGGAAAGGCAGAACCUGCGAUCUACAGUGCGAAGGAGCAGAAUCUGUCCUCCCGUUCCACCUCGAUGCGAGUGAGAACUCCUCCUGAUGGUCGCCAAGCUAUCGGGCAGUGCCCAUGUGGCAUACACACCUAUCUUCGUGACAAAAAGCAGUACGGGGUAGCCACUAAUGUGUUUUACGCUAGUUGCCCGAGAUUAUCCGAACAGGCUGACAAGACUUUAUUCCCCACUCUUUGGCCACCGGUGCCUUCUUUGGAGAGAUCGUCCAGCCGUUGUGCUGGCCAGCUUGUGUAUUUUACGCUGACCGAUGCCUCCCGCAGAACUGAAGUGACGAGGCAAUGCUGGUGUCACACCCUUCUCCGAAUCAUUCGUUGCGUGGAAAUAGCCGGGCGUCUUCCCGGUACCAUAGACGGCGGCGGGUGCCGGUAUUGGAAGAUUACUCCAAGAGAUACCGAUGGAACAGCCUCUCAUAUAGUCCGUAAAGACUUCAAUCCAAGGCCGGCUAUCAUUCCGCAGGGAUGUAAGGCGUAUUCAUCAUACGGUACUAGGAUCUCGCUCCCUUUCGCGCCAAGUGCGAUCUGUGGUCAGUCAUCGCGUCACAUAGCGCUGCUUGCCUGGGAAUCAGCACUUAUUAGUAAAUCGCGAUGCCAUGGGAUCCCGAGACAUAUCUACAAUCAUGUGCACAUCGAAGUGCUUCGUCUUCAACUAACUACGCUCCUAUUCAAAACCUGCCCAGUCGUCUACUAUCUAGCUAGCUCGGCUCCCACGGGUACGCGCCGGGGCCGUACCCAGCUGCCGAGUAUGUUAUGCCGGCUCAUUGUGAGUCACACCUCUCUCCGAGUUAAUUUAAAAGCUCGCCCAUCGAGACAGACCUCUGUAUGGAUUAACGGCCAAUUGCCGUGGAUACCCCGCUGGAUAGCGACCAUGUUGUCCCGGUCAUUAGAGUUCAUGCUUUCUCGGCGAUCAUUCCUGUAUACCAUCUUGGAAUCCCCCGUGUGGAGUGGGCGACGACAGAGUUCACUAAGAGAUAACACAGGCAAUGUUUUUAUAAUUAAGAUCUGUGUUGCCGGGGCACACCGAUGGAUUAGGUAUUCAUGGUGGCAGCAGGAUGAACACGUUCCUCGCAACGUUUUGGCUGUGCCUUAUCUAUCACUUAGACAGGUGACUGUAGCAUAUUUUUGGCCCUCCCUUGCUCUCUCCGAUCAUAAGAAUCGGGCACCACACAGUGAAUCAUAUCGAGUGGAGUGUCCAACACAUUGCUACAUAGUGAAUAAUUGCUGUGGGGCAUAUCAUGGGUGGCGUCUGAAGAGCGAUCCACUCUGCGAGGGUAUUAUGAUCACCCGCCCUAUUGACAGCCCUGAAGACUGCACAGGUCACACGAGUCUAAGCUGGCAUACUCCUGCUAACUUGCGAAGCCCUAAAAUUUUGGCAGCGCUAACACUGGGCAUCGCGGUGAUAAACGAAUUCCAAAGAACACAGCUGCAACCGCUCGGGUUAUUCAUUUAUACAUGGCCAUCAGCUUUUUCACAUCAAACGGAUCAGUGUCACGAGCGGGACCGGAGCUUUGCGCUUGAUUUAGGGGCGACAUAUGCACAUUCUCUUCGUGACGAACAUCACAGUGGGUUUACCUAUCGACCCCGACUGGUAAUCCCAAUACAGCAUGAUCCGAGACUUAGUUGCAAGGCCCGUAUGUUCACUUUACAUAGUCCUCGCCGGCUACCGCCUAUAACAGGCUCGUACAGGGAACCUACCCACGAUUAUUUUCCACGUACUAGUAAUAUUGGAAAGUUUUCCGCGCGGAUUCCGUUUGCUGCAGCAUGUCCACUACCCAGCAGGCUUUACGGUAAAAGGUUGGUGAGCCGCGAGGUGCGACAUUAUGUUCUCCGGAUGGCAAUACGUAACACCACUUUCGGCGGGGGUAUUAAAGGGGCCCAGGGCCAUAUGUGCAUCCUAUGUAAUGGCGGUUACCUGACUGUCGGAAACCUUCACUUUUGCCCAAUUCAGCUGGCGCCCCCUUAUUCUGAGUACUUAGGUCAGCUCGUCCCCUCCCGCCUCAGAGCUGGUAGGCAAUUCGACCAUACCAGACUUCAACAGCAUUUAAAGUUCCGCUUCAUAAAGUACGCCCACAGGGGCCCGGCUCCAAAGAGAAGCCCUACGCGCUGCCGUACUUGUAUCGAGCAGUUUACCGAUAUCGGUAUACCAUUCACAAAUCCUUUUAAGCAAAACGCAGAGGGCAGGGGUAAACCGUAUUACGCGCAAACAACUAUAAACCACGCGCCGGACGGAUGUAAGGAUCUACCACACGUCAAGCCAAAGACCCAUGGUAGAAUUCCUACACGAAACUUAAGUGGAGAAUUGCACAAUGUUAGGGCACGUUUUUUUCCUGGGAAGUUUGCGUAUGUUAACACAGUAGUCACGUGCCCUGCAGGAAUACCAAAUAACUCCGGAUAUCGUAGGCUUAGCAUACUAGCCUACUCUUCAACAUUCAGUCCGCAUCAGCCGGUUAAAGUUGCAGAACCAUCUUCGGGACAACUCUUCCACUAUAACUUUGGUGGUGCCCGUCCAGGUGCACUGCGCCGCUUGUUUCCGACAAUGAGCCUACCAUUAGCCAACAACCUACGAGGCACUAUGGUUCAAGGACUAUCAACUACGCGUAGAGUUUAUUUCGUACGCCGCUCACCACGAUUGAAUGAAAGCACGUCAUUAGCGGCGCCUAACCCCCAGGGACAGUUUCACGUUUUGGAGAUGUCUCAAGGACGUUCUCUUGCGCCAAUCACCUACCAAAUUAAAUUUGGCUACCACUCUGGUUAUGUCUGCUCAGCUGGAGCGAGCUCCUUACCUGACUCGCGUGUUAGCGUAUUAUCUUCUAGGUGCUGCCCAUGCACAGAUUCAUGUCUCACACUCUUUUCAGACCAAAAGCUCCCCAAGCACCAUCCGCACCCUCGUGUGAGGUGGAACCGCCGAACCUUCAAAACUCCGUGUACCGACGAAGGCAACUGUCUUGAGGUUCCGAGGUAUAAUACGGUUGUAACACCCGGCGAUCAAGCAUCUGCGGUACCGACUGCAACGGCGAUGAGUCCCGUGAUGAGUAGUUGGGCUAACCCUUUAGGGCUUUGCGUCUUCUACGAUUCUUUAGUAGACUGUUUAUCUCGUCGAGGUCACAGGAUAUACGGUGUGACAUACUUGCUGGCCACGACCCAAGGUUGUUUCCCACCUGCGACAGCGAGAGUUAGAGGUAGGAUAAUCAGACUCUCCCAUGCUUACCAACUGAAUAGGGUUAAGCACAAACCAUUGUUUGCUAGUUCCAUUGUCUUGUGUUUCACACACGCGACCCGCUAUGGGAUUAAUAUUUUAGCCGAGCUCCUCGAAAAAGUUUGCUGUGCACGUGGGGCAGGCUCAAGUCCCGCUUCGUUGCAUUGUACUAUUCAAAUCAGAUGCCACUUCCUGUGUGACUGCCUGUUGUCCUGUGUGAUGUCCCCAACAGUCGCCCUGCAUCAGUGUGUAUGGCAAGAGACUAUUGCGCCAGCAAUUAGAAGUACCUCCUUGAUACGAACGAAGAAACUUAACGGGAAGCCAUGGACUCCUCUGACAUCUGAGGUGGAAGACGCGUUAUUUGGUGACAUACUGCUCCGAGGUUAUGAAGGUCUCCAGAAAAUCGCUGAACGAACGUCUUUCCUCUCAGCGGUGUUUUGGUGUCACAGGACGCGGGGUAUAGAGAUAAUCUACUCAUGUGUCUUCCUUUCUAGCUGCACGCUCUUUCGUGAUCCUUCGAUAGCGUAUGCGGGGGUGAGAGAUUGCUCACCUGCGGCACCCUUUCGUAUUCUUAACGCCGGCGUACGGUACAUGGCAUCCGGGCCAACUUCACCCUGGCAAAGAGACCAAUCCCAAAACUCGUGUGCACGCGAGCCGACAAGUCACCUCUUAUUACCUGUGGAUUUAUUCUCGCGUCUCCACUUACCGUCCGAAAUGCUUUCGAGAGAAGAACACCUAAUUAGUUGCUGGAUCCCGCACUGCGUCUACGUCGCGGGGGUGGGGGUAUUGUCCCAUUCUGCAGUCAAGGUCGCCUUAAGUAGCCAUCUUCCGUUCGCAGGCACCUUGUCCUAUAUCGAAGCUAUGGGCGAGAACCUUUUCACUGGUAAUUACCCUGAGCCAAAGAUAACAGCUGGAGGCUGCUCCAUUAGUCCCGAUAGCAUCGUUUGUCCUUCUAUUUCGCCUCAGGUCACACUACCUGAGAUCCGGCUGCGGGGCCUCCCAUCCGCCAAUUUAGACCUUCGAACGGAGUGUACAAGCCAUCUGUGCCAAGUAGACUGGUCGAAAGAGACUGAUGCACGUUGCACAGUAUCGCUCCCUAGUGUUGCCAAGCUACGCGUUAGAACACCUUCGAAUGAGCCUAAUAUGGUGCAUACAUUCAAAAACGUCAGUCGGCUAGACCGAUAUGAACUGGUAAAUAUACUGUUUGUCAGCUUUGGCUCGGCGAGAUGUUGGAUCAGAUUUCAGUACAGUUACGAUGGCUGGCCGCCCUGCGGGGAUUGUGCGAUACAUUUAACUAGGCGCCGCAUCAGGGCUUCCGACACUUUAUUCUCGGAGGUCGUGGAAGUACAGUGUGGCUCGGUCACCUACACAUGCAAAAGUUAUUCCAUGACCGCAUCUUGCUGGCAGGUGUUGAAGAGGUGCCCUAGGCGACCAGGUUGCUGCGACCCGUCACAAAAAAACAGCGCUUACUGGACGCAGAGAGCACACGUCCGGACGACAAGAACCACCCUUUGGUUAAUACCCGCCCAGCGUGCCAUCACGACGUGGGGCUUUCAUUGGUGUACCAGUCCGCGUGGUCAUCGGCAUGUAAUACUAGGGAUCCGGCGGGUGUCAGAUUUCGUGGGUUGUACGAUCCAGACGACGCGGAUACGACAGAUGACUAUAACGAAAUGGUCUACCGUGCAACUCUCCUGCAGUGGUCAUCAAUCCGAGAAUGCCCUUUGGGUCAUGGUUGGUCAUUUCAUACUUUUUCAAUCCGAAUAUCCCGACGUGUUGCUCGAAUGGUACGUUUUCGAUCAUCUCGACCGUUGGAAUUCGGCCGCCGGGUCGUGCAGGGAUUCCCCCAAUUCUGCGCACCCCCUUACUGCGUCAUGCCUUUCAUCGGAUACCAAUGAGGCCGGCUUCCGACGCGGUUUAUCGCGUCCAGAGAGGCGCUGUUGUACGGAUAAUACCAUAGAACUUUGGACACUCACUAGAGAAAAUACCGUACCCUCUCUAGUUCAGGCGACCCUGGCUAUAAUGAGGAGAGUAAUACGUCCCCGUUCUGCACGGGUCCCGGUUUUUCAAUCAAUGUUUGAUAACACCCUAAACUGGAGUACGUUCAAACGGUCGCGAAGCCUCCAGCGGCCACAUAUCGCCACGCCUCAAUUAGCCAAGUUUCAAGGGCUUCGUGUAUCUUCAAGCCAGCACGGAAUAGUGUUAAGGUGGCGCCGACCAAGUUGUCUAGCUGCUCCGCUACGAGGUCGAGAGUUCUGGUGUCAUAUACAGCCGGGGCUGAGUACAGAGGUACACCAACAGGCCAAGACCGUCCAGGCAUAUCCAUCUAGCAUGACCAUACUUUUCAGUUGUUUCCCCGAGAAAGACUUCCGCCUUGGCCGCGGAUCGCACCCACUCUUCAACCCAAGCGCCGUUGAUAAGAAUACGUGUAACAGCUCGAUGCGUCGGUCAGUCAAAUGUUCAACACUACGCCAGUCCCGGAUUUUGCUCAAUGGAAACAAAACUGAGGCCUCUACAGCACAUAUCAAAAGGACUAUGUUCGUGCGCGCCCCAGCUCCUGUGGACGACAGCGAGGACCGCCAAACCAAAACGAACAUACAAUGUAGGCUAAGAGACAUGGGAGACAUCAUAAUUACCAAGAGGCCAAAUCCCGCAAAGGGUCAUGUUUUUGUGCCGAUCAAAUCUAGAGGAUUGGCGUGCGUCAUCGUUCGAAACUUUUGUAAAAAUUGCGGUCUUAAACCACUCUUCCCGAACGACGGAAGCCGUAACGCGCAUGGGUCUGUUCUUGGCAAUAAGCGGGCUUGUCCCGACGCACUUGCGGAUUGGCAGACGAUUGGUUCGGUUCUGGGUUCGAUCAUUCGAGGAUCUUUCCGCGAACAUAGGCGUAUAGAUCGGUGUGCCCUCGUGCGGUAUAGAUCUUAUUCGGCAGAGCGGAAUAUGAGUAUCCCUGAAUAUAGAGUACCAGAUUCAGUACUCUAUAGAUGGACAAACGGGGUGAUCUGGCAUUUCAAAAUCCAGAUGUAUGCCAUUGCUGGUGGGGUAGCCUCCACCCCGUCCAUAGCGCUUAACAUGCGUGUUGCGCGUGCACAUACACCCAUUCCAACCUGUAGCUGCCAAGCUUACUGUAGUACAAGCGGGAUAUACGGGCUACAACAUGAGUUCCAAAUAGGCUUAGUAGGCGAUUAUUGUGUGUACUCUACACGUUGCACUGGGACAAUCCUCCCGUCAAACAGCUCCUGCGCACGCGGUUUACAACCUAUCCGGGGGCGCCUGUCUUUCUCACAGCGAGUGAUACCGUUAACACAGUCCGUGUGUCCUUUUGGCAUCAACUUCCUCUUAGGGCCGCGCUUUAUGGAGGAAUUAUGGCGUCACACAAGUUAUGGAUGCUGGGGUAGACCAGCAGUAGAAGUAGUCGGGCACUAUACAACAAUCUUGUCCCCGCGUCUGUACAUGAGAGUCUGUACCUUCGCUGGUGAUAUUCCGUCACAUGCACCGUGUGGAGUGCCCUUGUUAAGUCGCCUUGCGCGGAAUGGUUCGUCUGAAGGGGUGUUCCGUAGGCCAAAUGGUUCCGUAUAUCUGAUUUCACAUCCCCGUCUCGGCGUUUCAGCGACAGCAACCUCGCGGUCAUGUAACCCAUAUGCACAGCCAUUAUUUAGAAAUGUGAAGAGAGUGGUAACUAUUGCGCAUCGCUUUCGUAUAUCCAGGCCCCGAAUGUACGCGCCUAGGCAUCGAGACCAAGAUGGCCUAGUUGUUCAAAAAAAUUCGUGUUAUGUCAGUAGUUGGCUGGGCAGGCAUAAUUGCUCAAGAAUAACCGAAUUCGUUUGCAUGUUAGUGUCCCGGAAUCGUGUCAGCAUCCGCAAACAAGUGAAUUGGCUGAUCUCAGACCGUUUAGCGAUACUUGGUCCUGGGCCCGCGGGAGGAGCAAAACUGUACAAUCAACAGCUUGUUCACUUCAGCUGGUGGGUCUGUGUGCUGUCGGACUGCUCCGUUCCCCAAGACACAAGGAGGGUCCCGUUUAGCAUGGUUCGCCUAUUAACCUCACAGGCGGUAAGGAAUUUGACGGUUCCGCGACAUCCGCCACGCGCACCCGGAGACGCCCCCGACAGUCCCCGGGGCGUUGCUACUAUAGCUUUGGUGCCAAACACAGCUGUUGCCCUCGGUACUCGCAGACAUAUCCAGCCAGGCACGGGGUCGUGUCACGGAUCGGGCGUCAUCGCUACAUCUUCAGUCGUCAACUUGCUCCCCAAUCCGUUGAACGUUACGGAAUGUCCUGUUAUUUCCUACCACUGGGUGUCGAGCUCAUGUGAGGAGCGGAGCGUCCGUAGUGGUCAAGCGCCCGCGAAUAGGGGCCACAGACACCUCAUUGGCAUAACCAGCGGGUUGUUGGCUCCGGGACAUCCAUUAGAUGAGAAGGCCUCGAGCGUGUUCCAUCACGUCCAUACGGGGGCCUUACAUAGUGUUGGAAAAGCAGCAGAUGUAACGAGAGAAGGACGUCCGAUAGUAGUGUAUAAGAGUUGUAGAUCGGGGGUAGUUGGGUCUACACGGAUUGAUAAUUACUUAAAUGCUCAGCCCAUAACGAAACUUUAUCCCCAAGCCCAGUCAGGCGAAUCACGGUAUACCCACUUUGGGGUUGUGUCGCUCGGCAGGGAAGGUGGGAUACGGAAACCGGCCAGAUCAUGCGCGCUCGGGUUCCACGAACACGGCGUGAAUGUGCCCCAAAUUGCUCCACCUUCGACGCUGUGCAGUGGGUGCUUCAUAAUCAGUAAGCGAACGAGGUCUCUUGAUGCGUCGGAGACUUUUAAGAGAACCCCCGGAUUCAUGAAAAUCGGCCCAAAAUCAGAUAGCCACAGGCAGGAACUGGCGAGGGCGAGUACUCUGCCAGGGAUAAGCGGCUGUUUCCACUUGUAUACACAUGGUACGGUUCCGUUCCAAGCGAGGCGAAGAAUAUUAGCGACCCUUUAUAAAUCAUGUUCCGUCUGUAGCGGUCGUUGGUUCUACUACGUAAAGGUGCAAACACCCAGAACUUAUAAGAUAUGCCGCCCUCGUGAGGUUCCGUCAAGCAGUGGACUUUAUAUUUGCGAUUUACAUAAGUGUCGAUUGACAAAUUUUACUUUACGAGCCCUUCAUGAGCGGUGGUGGACUGGGGACCCUUUGGCGUUGUGCCGCGUGAGGCCGUUGGCUGGUCUCAUUUGUUGCAGGGUAGUGACGGUUUUGGCGAUCACAGAACGCCGUUGCCUGAGGUGCCGAUUGGGCCCCUUGGGAUUCACUUUAGGCCGCGCGAACUUUACGCCUAUCCCGUAUCCAUCAGAUCGACGCUCUUCAAACACGCACCUAGACAUAAGGCGGGUGUGUUGUAGUAAUAAUAGCUUCAGCUCCCGACUUUCCAUGGGCAAGUACUCGUUUUCAGUUGCACGGGCCACACUUCACCAGUAUUCUGGACUACCCAAUCCUGAACUCAUCAAUUCAGGUCCCAAGCUCUCCUUCGCGUGCCUUGGCUGUCAACCCGGGACUCUUGUCGUUUGUCUCAGCCCUUGUGGGCCAGGCUGGUUACCCACGGUCUGUGGGGCCGCUACAUCGACCUUCAAACAGGCCUUGUAUAUACUGACUUCCUCCCUGGCGGGGCUCAGGGCCGGCUCAAGCAAGGGUUGGAGACGCUCUAGAGGCGGUGUAUACUCUAGAGUAGAUCGUAGGUCAACUGUAUGUACUUUAUCGAGCGUAGCGUUCGUCAGGUGGCAACACACCCACACGUGCUCCCUAGACAAGCUUUUACAACUUGAAACACGCUGGAGAAGAUGCAGGUCGAUGUAUGCCGUGUACAGGCAGCCUGGGCACACCAGGAUACCUGAAAAGUUCUACCAGAAACCGGAUGCCUUCGCAAGCGCGCGAAUCUAG'
codons = []
codons = [input_rna[i:i+3] for i in range(0, len(input_rna), 3)]
#print(codons)

aaresult = ''
for i in codons:
	if i=='UAA' or i=='UAG' or i=='UGA':
		break
	else:
		aaresult+=rna_dict.get(i)

print(aaresult)



### 9
with open('rosalind_subs.txt','r') as openfile:
	s = openfile.readline().strip()
	t = openfile.readline().strip()
s = 'TCACCTTTCTGTCACGCACCTTTAGCACCTTTCACCTTTGACGCACCTTTCGGCACCTTTGAGTCACCTTTCACACCTTTTAGTCACCTTTGACACCTTTCCACTTTACACCTTTCGCTGTCACCTTTCACCTTTTTGTCACCTTTTCACCTTTCACCTTTGGTCCACCTTTCACCTTTGCACCTTTCACCTTTGGCGATATTTGAGCACCTTTCACCTTTAATCACCTTTCACCTTTCACCTGTCACCTTTTCACCTTTGCACCTTTCACCTTTTGCGCCCACCTTTTGCACCTTTCACCTTTTCGCACCTTTCACCTTTGGTCGCACCTTTTAGGAAACACCTTTATAACACCTTTTTCACCTTTTGCACCTTTCACCTTTTACGATCAGTAATTCTCACCTTTGTCACCTTTATCACCTTTCCGCACCTTTCGCACCTTTGCCACCTTTCCACCTTTCACCTTTGTGTTTCACCTTTCCTGCGTCACCTTTTTCACCTTTCTTCCACCTTTGCACCTTTCACCTTTTTGTGGCACCTTTGACACCTTTCACCTTTGCTCACCTTTGCGAACACCTTTCTTCACCTTTATACACCTTTGCACCTTTCCACCTTTAGCCACCTTTTCTTTTATACGCACCTTTGCACCTTTCGCACCTTTCACCTTTGACACCTTTGCACCTTTGTCACCTTTACTCCCACCTTTCACCTTTTACACCTTTTGCGACACCTTTCCCGTAACACCTTTCTATTGAACGGTACACCTTTGCACCTTTAACCACCTTTCCACCTTTACTCACCTTTAGTGTTCACCTTTCTGAACACCTTTCCACCTTTCACCTTTCCTCACCTTTGTTCTCCACCTTTACACCTTTACACCTTTACG'
t = 'CACCTTTCA'
print(s)
print(t)
poslist = []
ls = len(s)
lt = len(t)


for i in range(ls):
	#print('s[i:i+lt]=',s[i:i+lt])
	if s[i:i+lt]==t:
		poslist.append(i+1)

for i in poslist:
	print(i)



### 10
strdict = {}
bigstring = ''
biglist = []
with open('rosalind_cons.txt','r') as f:
	line = f.readline()
	while line:
		bigstring+=line.strip()
		line = f.readline()
biglist = bigstring.split('>')
#print(biglist)

n = 13
strdict = {biglist[i][0:n]: biglist[i][n:] for i in range(1, len(biglist))}
#print(strdict)

strlen = len(strdict[next(iter(strdict))])
countA = [0]*strlen
countC = [0]*strlen
countG = [0]*strlen
countT = [0]*strlen

for i in range(strlen):
	for value in strdict.values():
		#print('i=',i,'; value=',value,'; value[i]=',value[i])
		if value[i]=='A':
			countA[i]+=1
		elif value[i]=='C':
			countC[i]+=1
		elif value[i]=='G':
			countG[i]+=1
		elif value[i]=='T':
			countT[i]+=1

consensus = ''
maxval = 0
for i in range(strlen):
	maxval = max(countA[i],countC[i],countG[i],countT[i])
	if countA[i]==maxval:
		consensus+='A'
	elif countC[i]==maxval:
		consensus+='C'
	elif countG[i]==maxval:
		consensus+='G'
	elif countT[i]==maxval:
		consensus+='T'
print(consensus)

strA = ''
strC = ''
strG = ''
strT = ''
for i in range(strlen):
	strA+=str(countA[i])+' '
	strC+=str(countC[i])+' '
	strG+=str(countG[i])+' '
	strT+=str(countT[i])+' '

print('A:',	strA)
print('C:',	strC)
print('G:',	strG)
print('T:',	strT)


#Mortal Fibonacci Rabbits
# http://rosalind.info/problems/fibd/

n = 0 # duration of experiment, months
m = 0 # rabbit's live duration, months
inputlist = []
with open('file.txt','r') as open_file:
	inputlist = open_file.readline().strip().split(' ')
	n = int(inputlist[0]) 
	m = int(inputlist[1]) 

rabbits = [0]*m
temp_rabbits = [0]*m

for i in range(n):
	if i==0:
		rabbits[0]=1
	else:
		temp_rabbits = [0]*m
		temp_rabbits[0]=sum(rabbits[1:])
		for x in range(1,m):
			temp_rabbits[x]=rabbits[x-1]
		rabbits=temp_rabbits
print(sum(rabbits))
'''

# take the smallest string and check if it's in other
	# if all strings are of same lenght = continue
# take 2 first signs [0:2] of string0 and search for them in other strings
	# if they are in all other strings, store and go to 3 signs
# if no take the next 2 signs (2:4) etc
# if no, take 2 signs with 1 shift (1:3) etc
# if we have 2-sign common, go for 3 first signs
# search for +1-signs line until there's no - then take the previous found
